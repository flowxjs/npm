{
  "_id": "find-my-way",
  "name": "find-my-way",
  "description": "Crazy fast http radix based router",
  "dist-tags": {
    "latest": "3.0.0"
  },
  "versions": {
    "3.0.0": {
      "name": "find-my-way",
      "version": "3.0.0",
      "description": "Crazy fast http radix based router",
      "main": "index.js",
      "typings": "index.d.ts",
      "scripts": {
        "bench": "node bench.js",
        "test:lint": "standard",
        "test:typescript": "tsc --project ./test/types/tsconfig.json",
        "test": "standard && tap -J test/*.test.js && npm run test:typescript",
        "test:report": "tap -J test/*.test.js --cov --coverage-report=html --coverage-report=cobertura | tee out.tap",
        "test:reporter": "tap-mocha-reporter xunit < out.tap > test/junit-testresults.xml"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/delvedor/find-my-way.git"
      },
      "keywords": [
        "http",
        "router",
        "radix",
        "fast",
        "speed"
      ],
      "engines": {
        "node": ">=10"
      },
      "author": {
        "name": "Tomas Della Vedova - @delvedor",
        "url": "http://delved.org"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/delvedor/find-my-way/issues"
      },
      "homepage": "https://github.com/delvedor/find-my-way#readme",
      "devDependencies": {
        "@types/node": "^11.9.4",
        "benchmark": "^2.1.4",
        "pre-commit": "^1.2.2",
        "request": "^2.88.0",
        "standard": "^14.0.0",
        "tap": "^14.0.0",
        "tap-mocha-reporter": "^5.0.1",
        "typescript": "^3.3.3"
      },
      "dependencies": {
        "fast-decode-uri-component": "^1.0.0",
        "safe-regex2": "^2.0.0",
        "semver-store": "^0.3.0"
      },
      "readme": "# find-my-way\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)  [![Build Status](https://dev.azure.com/delvedor/find-my-way/_apis/build/status/delvedor.find-my-way?branchName=master)](https://dev.azure.com/delvedor/find-my-way/_build/latest?definitionId=1&branchName=master) [![Coverage Status](https://img.shields.io/azure-devops/coverage/delvedor/find-my-way/1.svg)](https://dev.azure.com/delvedor/find-my-way) [![NPM downloads](https://img.shields.io/npm/dm/find-my-way.svg?style=flat)](https://www.npmjs.com/package/find-my-way)\n\nA crazy fast HTTP router, internally uses an highly performant [Radix Tree](https://en.wikipedia.org/wiki/Radix_tree) (aka compact [Prefix Tree](https://en.wikipedia.org/wiki/Trie)), supports route params, wildcards, and it's framework independent.\n\nIf you want to see a benchmark comparison with the most commonly used routers, see [here](https://github.com/delvedor/router-benchmark).<br>\nDo you need a real-world example that uses this router? Check out [Fastify](https://github.com/fastify/fastify) or [Restify](https://github.com/restify/node-restify).\n\n<a name=\"install\"></a>\n## Install\n```\nnpm i find-my-way --save\n```\n\n<a name=\"usage\"></a>\n## Usage\n```js\nconst http = require('http')\nconst router = require('find-my-way')()\n\nrouter.on('GET', '/', (req, res, params) => {\n  res.end('{\"message\":\"hello world\"}')\n})\n\nconst server = http.createServer((req, res) => {\n  router.lookup(req, res)\n})\n\nserver.listen(3000, err => {\n  if (err) throw err\n  console.log('Server listening on: http://localhost:3000')\n})\n```\n\n<a name=\"api\"></a>\n## API\n<a name=\"constructor\"></a>\n#### FindMyway([options])\nInstance a new router.<br>\nYou can pass a default route with the option `defaultRoute`.\n```js\nconst router = require('find-my-way')({\n  defaultRoute: (req, res) => {\n    res.statusCode = 404\n    res.end()\n  }\n})\n```\n\nIn case of a badly formatted url *(eg: `/hello/%world`)*, by default `find-my-way` will invoke the `defaultRoute`, unless you specify the `onBadUrl` option:\n```js\nconst router = require('find-my-way')({\n  onBadUrl: (path, req, res) => {\n    res.statusCode = 400\n    res.end(`Bad path: ${path}`)\n  }\n})\n```\n\nTrailing slashes can be ignored by supplying the `ignoreTrailingSlash` option:\n```js\nconst router = require('find-my-way')({\n  ignoreTrailingSlash: true\n})\nfunction handler (req, res, params) {\n  res.end('foo')\n}\n// maps \"/foo/\" and \"/foo\" to `handler`\nrouter.on('GET', '/foo/', handler)\n```\n\nYou can set a custom length for parameters in parametric *(standard, regex and multi)* routes by using `maxParamLength` option, the default value is 100 characters.<br/>\n*If the maximum length limit is reached, the default route will be invoked.*\n```js\nconst router = require('find-my-way')({\n  maxParamLength: 500\n})\n```\n\nIf you are using a regex based route, `find-my-way` will throw an error if detects potentially catastrophic exponential-time regular expressions *(internally uses [`safe-regex2`](https://github.com/fastify/safe-regex2))*.<br/>\nIf you want to disable this behavior, pass the option `allowUnsafeRegex`.\n```js\nconst router = require('find-my-way')({\n  allowUnsafeRegex: true\n})\n```\n\nAccording to [RFC3986](https://tools.ietf.org/html/rfc3986#section-6.2.2.1), find-my-way is case sensitive by default.\nYou can disable this by setting the `caseSensitive` option to `false`:\nin that case, all paths will be matched as lowercase, but the route parameters or wildcards will maintain their original letter casing. You can turn off case sensitivity with:\n\n```js\nconst router = require('find-my-way')({\n  caseSensitive: false\n})\n```\n\n<a name=\"custom-versioning\"></a>\nBy default `find-my-way` uses [accept-version](./lib/accept-version.js) strategy to match requests with different versions of the handlers. The matching logic of that strategy is explained [below](#semver). It is possible to define the alternative strategy:\n```js\nconst customVersioning = {\n  // storage factory\n  storage: function () {\n    let versions = {}\n    return {\n      get: (version) => { return versions[version] || null },\n      set: (version, store) => { versions[version] = store },\n      del: (version) => { delete versions[version] },\n      empty: () => { versions = {} }\n    }\n  },\n  deriveVersion: (req, ctx) => {\n    return req.headers['accept']\n  }\n}\n\nconst router = FindMyWay({ versioning: customVersioning });\n```\n\nThe custom strategy object should contain next properties:\n* `storage` - the factory function for the Storage of the handlers based on their version.\n* `deriveVersion` - the function to determine the version based on the request\n\nThe signature of the functions and objects must match the one from the example above.\n\n\n*Please, be aware, if you use custom versioning strategy - you use it on your own risk. This can lead both to the performance degradation and bugs which are not related to `find-my-way` itself*\n\n<a name=\"on\"></a>\n#### on(method, path, [opts], handler, [store])\nRegister a new route.\n```js\nrouter.on('GET', '/example', (req, res, params) => {\n  // your code\n})\n```\nLast argument, `store` is used to pass an object that you can access later inside the handler function. If needed, `store` can be updated.\n```js\nrouter.on('GET', '/example', (req, res, params, store) => {\n  assert.equal(store, { message: 'hello world' })\n}, { message: 'hello world' })\n```\n\n##### Versioned routes\n\nIf needed you can provide a `version` option, which will allow you to declare multiple versions of the same route.\n\n###### default\n<a name=\"semver\"></a>\nDefault versioning strategy is called `accept-version` and it follows the [semver](https://semver.org/) specification.<br/>\nWhen using `lookup`, `find-my-way` will automatically detect the `Accept-Version` header and route the request accordingly.<br/>\nInternally `find-my-way` uses the [`semver-store`](https://github.com/delvedor/semver-store) to get the correct version of the route; *advanced ranges* and *pre-releases* currently are not supported.<br/>\n*Be aware that using this feature will cause a degradation of the overall performances of the router.*\n```js\nrouter.on('GET', '/example', { version: '1.2.0' }, (req, res, params) => {\n  res.end('Hello from 1.2.0!')\n})\n\nrouter.on('GET', '/example', { version: '2.4.0' }, (req, res, params) => {\n  res.end('Hello from 2.4.0!')\n})\n\n// The 'Accept-Version' header could be '1.2.0' as well as '*', '2.x' or '2.4.x'\n```\nIf you declare multiple versions with the same *major* or *minor* `find-my-way` will always choose the highest compatible with the `Accept-Version` header value.\n\n###### custom\nIt's also possible to define a [custom versioning strategy](#custom-versioning) during the `find-my-way` initialization. In this case the logic of matching the request to the specific handler depends on the versioning strategy you use.\n\n##### on(methods[], path, [opts], handler, [store])\nRegister a new route for each method specified in the `methods` array.\nIt comes handy when you need to declare multiple routes with the same handler but different methods.\n```js\nrouter.on(['GET', 'POST'], '/example', (req, res, params) => {\n  // your code\n})\n```\n\n<a name=\"supported-path-formats\"></a>\n##### Supported path formats\nTo register a **parametric** path, use the *colon* before the parameter name. For **wildcard** use the *star*.\n*Remember that static routes are always inserted before parametric and wildcard.*\n\n```js\n// parametric\nrouter.on('GET', '/example/:userId', (req, res, params) => {}))\nrouter.on('GET', '/example/:userId/:secretToken', (req, res, params) => {}))\n\n// wildcard\nrouter.on('GET', '/example/*', (req, res, params) => {}))\n```\n\nRegular expression routes are supported as well, but pay attention, RegExp are very expensive in term of performance!<br>\nIf you want to declare a regular expression route, you must put the regular expression inside round parenthesis after the parameter name.\n```js\n// parametric with regexp\nrouter.on('GET', '/example/:file(^\\\\d+).png', () => {}))\n```\n\nIt's possible to define more than one parameter within the same couple of slash (\"/\"). Such as:\n```js\nrouter.on('GET', '/example/near/:lat-:lng/radius/:r', (req, res, params) => {}))\n```\n*Remember in this case to use the dash (\"-\") as parameters separator.*\n\nFinally it's possible to have multiple parameters with RegExp.\n```js\nrouter.on('GET', '/example/at/:hour(^\\\\d{2})h:minute(^\\\\d{2})m', (req, res, params) => {}))\n```\nIn this case as parameter separator it's possible to use whatever character is not matched by the regular expression.\n\nHaving a route with multiple parameters may affect negatively the performance, so prefer single parameter approach whenever possible, especially on routes which are on the hot path of your application.\n\n<a name=\"match-order\"></a>\n##### Match order\n\nThe routing algorithm matches one chunk at a time (where the chunk is a string between two slashes),\nthis means that it cannot know if a route is static or dynamic until it finishes to match the URL.\n\nThe chunks are matched in the following order:\n\n1. static\n1. parametric\n1. wildcards\n1. parametric(regex)\n1. multi parametric(regex)\n\nSo if you declare the following routes\n\n- `/:userId/foo/bar`\n- `/33/:a(^.*$)/:b`\n\nand the URL of the incoming request is /33/foo/bar,\nthe second route will be matched because the first chunk (33) matches the static chunk.\nIf the URL would have been /32/foo/bar, the first route would have been matched.\n\n<a name=\"supported-methods\"></a>\n##### Supported methods\nThe router is able to route all HTTP methods defined by [`http` core module](https://nodejs.org/api/http.html#http_http_methods).\n\n<a name=\"off\"></a>\n#### off(method, path)\nDeregister a route.\n```js\nrouter.off('GET', '/example')\n// => { handler: Function, params: Object, store: Object}\n// => null\n```\n\n##### off(methods[], path, handler, [store])\nDeregister a route for each method specified in the `methods` array.\nIt comes handy when you need to deregister multiple routes with the same path but different methods.\n```js\nrouter.off(['GET', 'POST'], '/example')\n// => [{ handler: Function, params: Object, store: Object}]\n// => null\n```\n\n<a name=\"reset\"></a>\n#### reset()\nEmpty router.\n```js\nrouter.reset()\n```\n\n##### Caveats\n* It's not possible to register two routes which differs only for their parameters, because internally they would be seen as the same route. In a such case you'll get an early error during the route registration phase. An example is worth thousand words:\n```js\nconst findMyWay = FindMyWay({\n  defaultRoute: (req, res) => {}\n})\n\nfindMyWay.on('GET', '/user/:userId(^\\\\d+)', (req, res, params) => {})\n\nfindMyWay.on('GET', '/user/:username(^[a-z]+)', (req, res, params) => {})\n// Method 'GET' already declared for route ':'\n```\n\n<a name=\"shorthand-methods\"></a>\n##### Shorthand methods\nIf you want an even nicer api, you can also use the shorthand methods to declare your routes.\n\nFor each HTTP supported method, there's the shorthand method. For example:\n```js\nrouter.get(path, handler [, store])\nrouter.delete(path, handler [, store])\nrouter.head(path, handler [, store])\nrouter.patch(path, handler [, store])\nrouter.post(path, handler [, store])\nrouter.put(path, handler [, store])\nrouter.options(path, handler [, store])\n// ...\n```\n\nIf you need a route that supports *all* methods you can use the `all` api.\n```js\nrouter.all(path, handler [, store])\n```\n\n<a name=\"lookup\"></a>\n#### lookup(request, response, [context])\nStart a new search, `request` and `response` are the server req/res objects.<br>\nIf a route is found it will automatically call the handler, otherwise the default route will be called.<br>\nThe url is sanitized internally, all the parameters and wildcards are decoded automatically.\n```js\nrouter.lookup(req, res)\n```\n\n`lookup` accepts an optional context which will be the value of `this` when executing a handler\n```js\nrouter.on('GET', '*', function(req, res) {\n  res.end(this.greeting);\n})\nrouter.lookup(req, res, { greeting: 'Hello, World!' })\n```\n\n<a name=\"find\"></a>\n#### find(method, path [, version])\nReturn (if present) the route registered in *method:path*.<br>\nThe path must be sanitized, all the parameters and wildcards are decoded automatically.<br/>\nYou can also pass an optional version string. In case of the default versioning strategy it should be conform to the [semver](https://semver.org/) specification.\n```js\nrouter.find('GET', '/example')\n// => { handler: Function, params: Object, store: Object}\n// => null\n\nrouter.find('GET', '/example', '1.x')\n// => { handler: Function, params: Object, store: Object}\n// => null\n```\n\n<a name=\"pretty-print\"></a>\n#### prettyPrint()\nPrints the representation of the internal radix tree, useful for debugging.\n```js\nfindMyWay.on('GET', '/test', () => {})\nfindMyWay.on('GET', '/test/hello', () => {})\nfindMyWay.on('GET', '/hello/world', () => {})\n\nconsole.log(findMyWay.prettyPrint())\n// └── /\n//   ├── test (GET)\n//   │   └── /hello (GET)\n//   └── hello/world (GET)\n```\n\n<a name=\"routes\"></a>\n#### routes\nReturn the all routes **registered** at moment, useful for debugging.\n\n```js\nconst findMyWay = require('find-my-way')()\n\nfindMyWay.on('GET', '/test', () => {})\nfindMyWay.on('GET', '/test/hello', () => {})\n\nconsole.log(findMyWay.routes)\n// Will print\n// [\n//   {\n//     method: 'GET',\n//     path: '/test',\n//     opts: {},\n//     handler: [Function],\n//     store: undefined\n//   },\n//   {\n//     method: 'GET',\n//     path: '/test/hello',\n//     opts: {},\n//     handler: [Function],\n//     store: undefined\n//   }\n// ]\n```\n\n<a name=\"acknowledgements\"></a>\n## Acknowledgements\n\nIt is inspired by the [echo](https://github.com/labstack/echo) router, some parts have been extracted from [trekjs](https://github.com/trekjs) router.\n\n<a name=\"sponsor\"></a>\n#### Past sponsor\n\n- [LetzDoIt](http://www.letzdoitapp.com/)\n\n<a name=\"license\"></a>\n## License\n**[find-my-way - MIT](https://github.com/delvedor/find-my-way/blob/master/LICENSE)**<br>\n**[trekjs/router - MIT](https://github.com/trekjs/router/blob/master/LICENSE)**\n\nCopyright © 2017-2019 Tomas Della Vedova\n",
      "readmeFilename": "README.md",
      "gitHead": "bb368c9c3dad7715bbbf2735d0ba1a39604e8047",
      "_id": "find-my-way@3.0.0",
      "_nodeVersion": "12.16.1",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-95LUZ0yn4+rdL30GwzlhyzARkpvXbM4qbeFxWP5cRRh2wgpDSynGVeVTze2NPe4yVxXYLudVF5jVY8L1sNQ5Yg==",
        "shasum": "526836a0e7b15133a3116ccd8f1767e300c3cfbd",
        "tarball": "http://127.0.0.1:3000/find-my-way/-/find-my-way-3.0.0.tgz"
      }
    }
  },
  "readme": "# find-my-way\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)  [![Build Status](https://dev.azure.com/delvedor/find-my-way/_apis/build/status/delvedor.find-my-way?branchName=master)](https://dev.azure.com/delvedor/find-my-way/_build/latest?definitionId=1&branchName=master) [![Coverage Status](https://img.shields.io/azure-devops/coverage/delvedor/find-my-way/1.svg)](https://dev.azure.com/delvedor/find-my-way) [![NPM downloads](https://img.shields.io/npm/dm/find-my-way.svg?style=flat)](https://www.npmjs.com/package/find-my-way)\n\nA crazy fast HTTP router, internally uses an highly performant [Radix Tree](https://en.wikipedia.org/wiki/Radix_tree) (aka compact [Prefix Tree](https://en.wikipedia.org/wiki/Trie)), supports route params, wildcards, and it's framework independent.\n\nIf you want to see a benchmark comparison with the most commonly used routers, see [here](https://github.com/delvedor/router-benchmark).<br>\nDo you need a real-world example that uses this router? Check out [Fastify](https://github.com/fastify/fastify) or [Restify](https://github.com/restify/node-restify).\n\n<a name=\"install\"></a>\n## Install\n```\nnpm i find-my-way --save\n```\n\n<a name=\"usage\"></a>\n## Usage\n```js\nconst http = require('http')\nconst router = require('find-my-way')()\n\nrouter.on('GET', '/', (req, res, params) => {\n  res.end('{\"message\":\"hello world\"}')\n})\n\nconst server = http.createServer((req, res) => {\n  router.lookup(req, res)\n})\n\nserver.listen(3000, err => {\n  if (err) throw err\n  console.log('Server listening on: http://localhost:3000')\n})\n```\n\n<a name=\"api\"></a>\n## API\n<a name=\"constructor\"></a>\n#### FindMyway([options])\nInstance a new router.<br>\nYou can pass a default route with the option `defaultRoute`.\n```js\nconst router = require('find-my-way')({\n  defaultRoute: (req, res) => {\n    res.statusCode = 404\n    res.end()\n  }\n})\n```\n\nIn case of a badly formatted url *(eg: `/hello/%world`)*, by default `find-my-way` will invoke the `defaultRoute`, unless you specify the `onBadUrl` option:\n```js\nconst router = require('find-my-way')({\n  onBadUrl: (path, req, res) => {\n    res.statusCode = 400\n    res.end(`Bad path: ${path}`)\n  }\n})\n```\n\nTrailing slashes can be ignored by supplying the `ignoreTrailingSlash` option:\n```js\nconst router = require('find-my-way')({\n  ignoreTrailingSlash: true\n})\nfunction handler (req, res, params) {\n  res.end('foo')\n}\n// maps \"/foo/\" and \"/foo\" to `handler`\nrouter.on('GET', '/foo/', handler)\n```\n\nYou can set a custom length for parameters in parametric *(standard, regex and multi)* routes by using `maxParamLength` option, the default value is 100 characters.<br/>\n*If the maximum length limit is reached, the default route will be invoked.*\n```js\nconst router = require('find-my-way')({\n  maxParamLength: 500\n})\n```\n\nIf you are using a regex based route, `find-my-way` will throw an error if detects potentially catastrophic exponential-time regular expressions *(internally uses [`safe-regex2`](https://github.com/fastify/safe-regex2))*.<br/>\nIf you want to disable this behavior, pass the option `allowUnsafeRegex`.\n```js\nconst router = require('find-my-way')({\n  allowUnsafeRegex: true\n})\n```\n\nAccording to [RFC3986](https://tools.ietf.org/html/rfc3986#section-6.2.2.1), find-my-way is case sensitive by default.\nYou can disable this by setting the `caseSensitive` option to `false`:\nin that case, all paths will be matched as lowercase, but the route parameters or wildcards will maintain their original letter casing. You can turn off case sensitivity with:\n\n```js\nconst router = require('find-my-way')({\n  caseSensitive: false\n})\n```\n\n<a name=\"custom-versioning\"></a>\nBy default `find-my-way` uses [accept-version](./lib/accept-version.js) strategy to match requests with different versions of the handlers. The matching logic of that strategy is explained [below](#semver). It is possible to define the alternative strategy:\n```js\nconst customVersioning = {\n  // storage factory\n  storage: function () {\n    let versions = {}\n    return {\n      get: (version) => { return versions[version] || null },\n      set: (version, store) => { versions[version] = store },\n      del: (version) => { delete versions[version] },\n      empty: () => { versions = {} }\n    }\n  },\n  deriveVersion: (req, ctx) => {\n    return req.headers['accept']\n  }\n}\n\nconst router = FindMyWay({ versioning: customVersioning });\n```\n\nThe custom strategy object should contain next properties:\n* `storage` - the factory function for the Storage of the handlers based on their version.\n* `deriveVersion` - the function to determine the version based on the request\n\nThe signature of the functions and objects must match the one from the example above.\n\n\n*Please, be aware, if you use custom versioning strategy - you use it on your own risk. This can lead both to the performance degradation and bugs which are not related to `find-my-way` itself*\n\n<a name=\"on\"></a>\n#### on(method, path, [opts], handler, [store])\nRegister a new route.\n```js\nrouter.on('GET', '/example', (req, res, params) => {\n  // your code\n})\n```\nLast argument, `store` is used to pass an object that you can access later inside the handler function. If needed, `store` can be updated.\n```js\nrouter.on('GET', '/example', (req, res, params, store) => {\n  assert.equal(store, { message: 'hello world' })\n}, { message: 'hello world' })\n```\n\n##### Versioned routes\n\nIf needed you can provide a `version` option, which will allow you to declare multiple versions of the same route.\n\n###### default\n<a name=\"semver\"></a>\nDefault versioning strategy is called `accept-version` and it follows the [semver](https://semver.org/) specification.<br/>\nWhen using `lookup`, `find-my-way` will automatically detect the `Accept-Version` header and route the request accordingly.<br/>\nInternally `find-my-way` uses the [`semver-store`](https://github.com/delvedor/semver-store) to get the correct version of the route; *advanced ranges* and *pre-releases* currently are not supported.<br/>\n*Be aware that using this feature will cause a degradation of the overall performances of the router.*\n```js\nrouter.on('GET', '/example', { version: '1.2.0' }, (req, res, params) => {\n  res.end('Hello from 1.2.0!')\n})\n\nrouter.on('GET', '/example', { version: '2.4.0' }, (req, res, params) => {\n  res.end('Hello from 2.4.0!')\n})\n\n// The 'Accept-Version' header could be '1.2.0' as well as '*', '2.x' or '2.4.x'\n```\nIf you declare multiple versions with the same *major* or *minor* `find-my-way` will always choose the highest compatible with the `Accept-Version` header value.\n\n###### custom\nIt's also possible to define a [custom versioning strategy](#custom-versioning) during the `find-my-way` initialization. In this case the logic of matching the request to the specific handler depends on the versioning strategy you use.\n\n##### on(methods[], path, [opts], handler, [store])\nRegister a new route for each method specified in the `methods` array.\nIt comes handy when you need to declare multiple routes with the same handler but different methods.\n```js\nrouter.on(['GET', 'POST'], '/example', (req, res, params) => {\n  // your code\n})\n```\n\n<a name=\"supported-path-formats\"></a>\n##### Supported path formats\nTo register a **parametric** path, use the *colon* before the parameter name. For **wildcard** use the *star*.\n*Remember that static routes are always inserted before parametric and wildcard.*\n\n```js\n// parametric\nrouter.on('GET', '/example/:userId', (req, res, params) => {}))\nrouter.on('GET', '/example/:userId/:secretToken', (req, res, params) => {}))\n\n// wildcard\nrouter.on('GET', '/example/*', (req, res, params) => {}))\n```\n\nRegular expression routes are supported as well, but pay attention, RegExp are very expensive in term of performance!<br>\nIf you want to declare a regular expression route, you must put the regular expression inside round parenthesis after the parameter name.\n```js\n// parametric with regexp\nrouter.on('GET', '/example/:file(^\\\\d+).png', () => {}))\n```\n\nIt's possible to define more than one parameter within the same couple of slash (\"/\"). Such as:\n```js\nrouter.on('GET', '/example/near/:lat-:lng/radius/:r', (req, res, params) => {}))\n```\n*Remember in this case to use the dash (\"-\") as parameters separator.*\n\nFinally it's possible to have multiple parameters with RegExp.\n```js\nrouter.on('GET', '/example/at/:hour(^\\\\d{2})h:minute(^\\\\d{2})m', (req, res, params) => {}))\n```\nIn this case as parameter separator it's possible to use whatever character is not matched by the regular expression.\n\nHaving a route with multiple parameters may affect negatively the performance, so prefer single parameter approach whenever possible, especially on routes which are on the hot path of your application.\n\n<a name=\"match-order\"></a>\n##### Match order\n\nThe routing algorithm matches one chunk at a time (where the chunk is a string between two slashes),\nthis means that it cannot know if a route is static or dynamic until it finishes to match the URL.\n\nThe chunks are matched in the following order:\n\n1. static\n1. parametric\n1. wildcards\n1. parametric(regex)\n1. multi parametric(regex)\n\nSo if you declare the following routes\n\n- `/:userId/foo/bar`\n- `/33/:a(^.*$)/:b`\n\nand the URL of the incoming request is /33/foo/bar,\nthe second route will be matched because the first chunk (33) matches the static chunk.\nIf the URL would have been /32/foo/bar, the first route would have been matched.\n\n<a name=\"supported-methods\"></a>\n##### Supported methods\nThe router is able to route all HTTP methods defined by [`http` core module](https://nodejs.org/api/http.html#http_http_methods).\n\n<a name=\"off\"></a>\n#### off(method, path)\nDeregister a route.\n```js\nrouter.off('GET', '/example')\n// => { handler: Function, params: Object, store: Object}\n// => null\n```\n\n##### off(methods[], path, handler, [store])\nDeregister a route for each method specified in the `methods` array.\nIt comes handy when you need to deregister multiple routes with the same path but different methods.\n```js\nrouter.off(['GET', 'POST'], '/example')\n// => [{ handler: Function, params: Object, store: Object}]\n// => null\n```\n\n<a name=\"reset\"></a>\n#### reset()\nEmpty router.\n```js\nrouter.reset()\n```\n\n##### Caveats\n* It's not possible to register two routes which differs only for their parameters, because internally they would be seen as the same route. In a such case you'll get an early error during the route registration phase. An example is worth thousand words:\n```js\nconst findMyWay = FindMyWay({\n  defaultRoute: (req, res) => {}\n})\n\nfindMyWay.on('GET', '/user/:userId(^\\\\d+)', (req, res, params) => {})\n\nfindMyWay.on('GET', '/user/:username(^[a-z]+)', (req, res, params) => {})\n// Method 'GET' already declared for route ':'\n```\n\n<a name=\"shorthand-methods\"></a>\n##### Shorthand methods\nIf you want an even nicer api, you can also use the shorthand methods to declare your routes.\n\nFor each HTTP supported method, there's the shorthand method. For example:\n```js\nrouter.get(path, handler [, store])\nrouter.delete(path, handler [, store])\nrouter.head(path, handler [, store])\nrouter.patch(path, handler [, store])\nrouter.post(path, handler [, store])\nrouter.put(path, handler [, store])\nrouter.options(path, handler [, store])\n// ...\n```\n\nIf you need a route that supports *all* methods you can use the `all` api.\n```js\nrouter.all(path, handler [, store])\n```\n\n<a name=\"lookup\"></a>\n#### lookup(request, response, [context])\nStart a new search, `request` and `response` are the server req/res objects.<br>\nIf a route is found it will automatically call the handler, otherwise the default route will be called.<br>\nThe url is sanitized internally, all the parameters and wildcards are decoded automatically.\n```js\nrouter.lookup(req, res)\n```\n\n`lookup` accepts an optional context which will be the value of `this` when executing a handler\n```js\nrouter.on('GET', '*', function(req, res) {\n  res.end(this.greeting);\n})\nrouter.lookup(req, res, { greeting: 'Hello, World!' })\n```\n\n<a name=\"find\"></a>\n#### find(method, path [, version])\nReturn (if present) the route registered in *method:path*.<br>\nThe path must be sanitized, all the parameters and wildcards are decoded automatically.<br/>\nYou can also pass an optional version string. In case of the default versioning strategy it should be conform to the [semver](https://semver.org/) specification.\n```js\nrouter.find('GET', '/example')\n// => { handler: Function, params: Object, store: Object}\n// => null\n\nrouter.find('GET', '/example', '1.x')\n// => { handler: Function, params: Object, store: Object}\n// => null\n```\n\n<a name=\"pretty-print\"></a>\n#### prettyPrint()\nPrints the representation of the internal radix tree, useful for debugging.\n```js\nfindMyWay.on('GET', '/test', () => {})\nfindMyWay.on('GET', '/test/hello', () => {})\nfindMyWay.on('GET', '/hello/world', () => {})\n\nconsole.log(findMyWay.prettyPrint())\n// └── /\n//   ├── test (GET)\n//   │   └── /hello (GET)\n//   └── hello/world (GET)\n```\n\n<a name=\"routes\"></a>\n#### routes\nReturn the all routes **registered** at moment, useful for debugging.\n\n```js\nconst findMyWay = require('find-my-way')()\n\nfindMyWay.on('GET', '/test', () => {})\nfindMyWay.on('GET', '/test/hello', () => {})\n\nconsole.log(findMyWay.routes)\n// Will print\n// [\n//   {\n//     method: 'GET',\n//     path: '/test',\n//     opts: {},\n//     handler: [Function],\n//     store: undefined\n//   },\n//   {\n//     method: 'GET',\n//     path: '/test/hello',\n//     opts: {},\n//     handler: [Function],\n//     store: undefined\n//   }\n// ]\n```\n\n<a name=\"acknowledgements\"></a>\n## Acknowledgements\n\nIt is inspired by the [echo](https://github.com/labstack/echo) router, some parts have been extracted from [trekjs](https://github.com/trekjs) router.\n\n<a name=\"sponsor\"></a>\n#### Past sponsor\n\n- [LetzDoIt](http://www.letzdoitapp.com/)\n\n<a name=\"license\"></a>\n## License\n**[find-my-way - MIT](https://github.com/delvedor/find-my-way/blob/master/LICENSE)**<br>\n**[trekjs/router - MIT](https://github.com/trekjs/router/blob/master/LICENSE)**\n\nCopyright © 2017-2019 Tomas Della Vedova\n",
  "_attachments": {
    "find-my-way-3.0.0.tgz": {
      "content_type": "application/octet-stream",
      "data": "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",
      "length": 27081
    }
  }
}